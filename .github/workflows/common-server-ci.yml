name: Common-Server-CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: src/azureml-inference-server-http/

jobs:
  Server-Tests:
    strategy:
      matrix:
        python_version: ['3.7', '3.8', '3.9', '3.10']
        pool_vmImage: ['ubuntu-latest', 'windows-latest']
    runs-on: ${{matrix.pool_vmImage}}
    environment: dev
    steps:
      - name: Clone branch
        uses: actions/checkout@v3

      # Specify the python version
      - name: Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python_version}}

      - name: Install azureml_inference_server_http
        run: |
            pip install -e .[dev]
      
      - name: Run Tests
        run: |
            set -e
            pip install pytest-azurepipelines
            AML_LOG_ANALYTICS_WORKSPACE_ID=${{secrets.AML_LOG_ANALYTICS_WORKSPACE_ID}} \
            AML_APP_INSIGHTS_KEY=${{secrets.AML_APP_INSIGHTS_KEY}} \
            coverage run --rcfile tests/server/.coveragerc -m \
            pytest \
              --online \
              --test-run-title "$(Agent.JobName)" \
              --no-coverage-upload
            coverage combine . tests/server
            # Ignore errors because it won't be able to find the `main.py` that was temporary placed into the package.
            coverage report --ignore-errors --show-missing
            coverage xml --ignore-errors

    # - name: Publish code coverage results (TBD)

  # Run Lint check for the source code
  Flake8:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Clone branch
        uses: actions/checkout@v3

      - name: Install flake8
        run: pip install flake8

      - name: Lint check
        run: flake8 .
  
  # Run Black check for the source code
  Black:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Clone branch
        uses: actions/checkout@v3

      - name: Install black
        run: pip install black

      - name: Black check
        run: black --check .
